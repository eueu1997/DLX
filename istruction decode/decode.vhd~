library IEEE;
use IEEE.std_logic_1164.all;

entity decode is
  port(-- ID Control Signals
       RegA_LATCH_EN      : out std_logic;  -- Register A Latch Enable
       RegB_LATCH_EN      : out std_logic;  -- Register B Latch Enable
       RegIMM_LATCH_EN    : out std_logic;  -- Immediate Register Latch Enable
       -- Datapath signal
       ir_s : in std_logic_vector(31 downto 0);
       A_out : out std_logic_vector(31 downto 0);
       B_out : out std_logic_vector(31 downto 0);
       imm_out : out std_logic_vector(31 downto 0);
      );
end decode;

architecture structural of decode is

  component register_file is
    generic(bit_add : integer := 5;
            bit_data : integer := 32);
    port(CLK: 		IN std_logic;
         RESET: 	IN std_logic;
	 ENABLE: 	IN std_logic;
	 RD1: 		IN std_logic;
	 RD2: 		IN std_logic;
	 WR: 		IN std_logic;
	 ADD_WR: 	IN std_logic_vector(bit_add -1 downto 0);
	 ADD_RD1: 	IN std_logic_vector(bit_add -1 downto 0);
	 ADD_RD2: 	IN std_logic_vector(bit_add -1 downto 0);
	 DATAIN: 	IN std_logic_vector(bit_data -1 downto 0);
         OUT1: 		OUT std_logic_vector(bit_data -1 downto 0);
	 OUT2: 		OUT std_logic_vector(bit_data -1 downto 0));
  end component;

  component register_1 is
     generic ( n_bit : integer);
     port (d_in : in std_logic_vector(n_bit-1 downto 0);
           d_out : out std_logic_vector(n_bit-1 downto 0);
       	   en : in std_logic);
  end component;

  signal rf_to_a, rf_to_b : std_logic_vector(31 downto 0);
-------------------------------------
begin

  REG_FILE : register_file
    port map(CLK,
         RESET,
	 ENABLE,
	 RD1,
	 RD2,
	 WR,
	 ADD_WR,
	 ADD_RD1: 	IN std_logic_vector(bit_add -1 downto 0);
	 ADD_RD2: 	IN std_logic_vector(bit_add -1 downto 0);
	 DATAIN: 	IN std_logic_vector(bit_data -1 downto 0);
         OUT1: 		OUT std_logic_vector(bit_data -1 downto 0);
	 OUT2: 		OUT std_logic_vector(bit_data -1 downto 0));

end structural;
