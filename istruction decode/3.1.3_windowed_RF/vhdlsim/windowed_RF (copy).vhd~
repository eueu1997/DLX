library IEEE;
use IEEE.std_logic_1164.all;
use ieee.math_real.all;
use ieee.numeric_std.all;

entity WINDOWED_RF is
  generic(NBIT: integer;
          M : integer; -- Num global regs
          N : integer; -- Regs in each IN, OUT, LOCAL
          F : integer); -- Num of windows
  port(-- Input control bit
       CLK: in std_logic;
       RST: in std_logic;
       EN:  in std_logic;
       RD1: in std_logic;
       RD2: in std_logic;
       WR: in std_logic;
------ Input address
       ADD_WR: in std_logic_vector(integer(log2(real(3*N+M)))-1 downto 0);
       ADD_RD1: in std_logic_vector(integer(log2(real(3*N+M)))-1 downto 0);
       ADD_RD2: in std_logic_vector(integer(log2(real(3*N+M)))-1 downto 0);
------ Data in/out
       DATAIN: in std_logic_vector(NBIT-1 downto 0);
       OUT1: out std_logic_vector(NBIT-1 downto 0);
       OUT2: out std_logic_vector(NBIT-1 downto 0);
------ Subroutine control signals
       CALL: in std_logic; 
       RET: in std_logic;
------ MMU control signals
       FILL: out std_logic;
       SPILL: out std_logic;
------ BUS to/from used when spilling/filling registers
       BUSIN:   in std_logic_vector(NBIT-1 downto 0);
       BUSOUT:  out std_logic_vector(NBIT-1 downto 0));
end entity;

-------------------------------------------------------------------------------------------------
architecture behavioral of WINDOWED_RF is

component register_file is
  generic( bit_add:	integer;
         bit_data:	integer);
  port ( CLK: 	IN std_logic;
         RESET: 	IN std_logic;
         ENABLE: IN std_logic;
         RD1: 	IN std_logic;
         RD2: 	IN std_logic;
         WR: 	IN std_logic;
         ADD_WR: 	IN std_logic_vector(integer(log2(real(bit_data))) -1 downto 0);
         ADD_RD1: 	IN std_logic_vector(integer(log2(real(bit_data))) -1 downto 0);
         ADD_RD2: 	IN std_logic_vector(integer(log2(real(bit_data))) -1 downto 0);
         DATAIN: 	IN std_logic_vector(bit_data -1 downto 0);
         OUT1: 	OUT std_logic_vector(bit_data -1 downto 0);
         OUT2: 	OUT std_logic_vector(bit_data -1 downto 0));
end component;

component Cnt IS 
  generic ( N : integer);
  port (C: OUT std_logic_vector(N-1 DOWNTO 0);
        clk, clr, cnt, dir: IN std_logic ); 
END component;

constant NREG: integer := M+2*N*F;
constant dim_ph_add: integer := integer(log2(real(NREG)));
constant dim_win: integer := integer(log2(real(F)));
type REG_ARRAY is array (NREG-1 downto 0) of std_logic_vector(NBIT-1 downto 0);
signal ph_regs: REG_ARRAY;
signal addr_wr,addr_rd1,addr_rd2: std_logic_vector(integer(log2(real(NREG)))-1 downto 0);
signal SPILLING, FILLING: std_logic := '0';
variable count : integer := 0;

-------------------------------------------------------------------------------------------------------------------------
begin

RF_U : register_file generic map (bit_add => integer(log2(real(2*N*F+M))), bit_data => NBIT)
                     port map (CLK, RST, EN, RD1, RD2, WR,
                               addr_wr, addr_rd1, addr_rd2,
                               DATAIN, OUT1, OUT2);

process (ADD_WR, ADD_RD1, ADD_RD2)
variable SWP,CWP,CANSAVE,CANRESTORE : std_logic_vector(dim_win-1 downto 0); -- 99% le variabili non vanno bene perche non hanno memoria probabilmente e poi non possono essere passate da un processo all'altro. Possiamo generare 4 registri e all'inizio di ogni processo assegniamo il valore del registro in quell'istante a una variabile per comodita, modifichiamo la variabile a piacimento, e a fine processo assegnamo la variabile al registro

	begin
	IF(to_integer(signed(CWP)) = 7*2*N) THEN -- CASO SPECIALE( ultima window con blocco out nei primi registri del RF -> cwp=0)
          if(to_integer(unsigned(ADD_WR))<2*N) then -- per i registri IN LOCAL
            addr_wr(dim_ph_add-1 downto dim_ph_add-dim_win) <= cwp;  -- i MSB del addres fisico sono dati dal CWP
            addr_wr(dim_ph_add-dim_win-1 downto 0) <= ADD_WR; -- i LSB 
          elsif((2*N <= to_integer(signed(ADD_WR))) and (to_integer(signed(ADD_WR)) < 3*N)) THEN -- per i registri OUT
                 addr_wr(dim_ph_add-1 downto dim_ph_add-dim_win) <= (OTHERS =>'0');
                 addr_wr(dim_ph_add-dim_win-1 downto 0) <= ADD_WR; -- i LSB 
          else --  PER I REGISTRI GLOBALI
            addr_wr(dim_ph_add-1 downto dim_ph_add-dim_win) <= (OTHERS =>'1');
            addr_wr(dim_ph_add-dim_win-1 downto 0) <= ADD_WR; -- i LSB
          end if;
            
        ELSE  ----------------- CASO NORMALE 
          if(to_integer(unsigned(ADD_WR))<3*N) then -- IN/OUT/LOCAL registers 
            addr_wr(dim_ph_add-1 downto dim_ph_add-dim_win)   <= cwp;  -- i MSB del addres fisico sono dati dal CWP
            addr_wr(dim_ph_add-dim_win-1  downto 0) <= ADD_WR; -- i LSB 
          else -- GLOBAL registers
            addr_wr(dim_ph_add-1 downto dim_ph_add-dim_win)   <= (OTHERS =>'1');
            addr_wr(dim_ph_add-dim_win-1 downto 0) <= ADD_WR; -- i LSB 
          end if;
          
        END IF;

end process;

PROCESS( CALL )
 variable SWP,CWP,CANSAVE,CANRESTORE : std_logic_vector(dim_win-1 downto 0);
 
 begin 
   CANSAVE := std_logic_vector(unsigned(CANSAVE) - 1); 
   CANRESTORE := std_logic_vector(unsigned(CANRESTORE) + 1);
   CWP := std_logic_vector(unsigned(CWP) + 2*N) ;  

   if(to_integer(unsigned(CANSAVE)) = 1) then 
     SPILLING <= '1'; -- implementare funzione spill() ( puo anche non essere funzione basta che spilli
     SWP := std_logic_vector(unsigned(SWP) + 2*N);
     CANSAVE := std_logic_vector(unsigned(CANSAVE) + 1);
     CANRESTORE := std_logic_vector(unsigned(CANRESTORE) - 1);
   end if;
end process;

PROCESS(RET)
  variable SWP,CWP,CANSAVE,CANRESTORE : std_logic_vector(dim_win-1 downto 0);
begin
  CANSAVE := std_logic_vector(unsigned(CANSAVE) + 1); 
  CANRESTORE := std_logic_vector(unsigned(CANRESTORE) - 1);
  CWP := std_logic_vector(unsigned(CWP) - 2*N);  

  if(to_integer(unsigned(CANRESTORE)) = 1) then 
    FILLING <= '1';
    SWP := std_logic_vector(unsigned(SWP) + 2*N);
    CANSAVE := std_logic_vector(unsigned(CANSAVE) -1);
    CANRESTORE := std_logic_vector(unsigned(CANRESTORE) + 1);
  end if;
end PROCESS;

PROCESS(SPILLING, CLK)
  
  if(SPILLING = '1' and rising_edge(CLK)) then
    BUSOUT <= ph_regs(CWP + count);
    if(count = 2*N-1) then
      SPILLING <= '0';
      count <= 0;
    else
      count <= count +1;
    end if;
  end if;
end PROCESS;

PROCESS(FILLING, CLK)
  if(FILLING = '1' and rising_edge(CLK)) then
    ph_regs(CWP + count) <= BUSIN;
    if(count = 2*N-1) then
      FILLING <= '0';
      count <= 0;
    else
      count <= count + 1;
    end if;
  end if;
end PROCESS;  

end behavioral;
--------------------------------------------------------------------------------------------------------------------------
